## ------------------------------------------------------------------------------------------------------------------------
## Pull-Based GitOps Deployment
## This workflow takes in an EXISTING ACR and AKS cluster and updates the AKS manifest files for GitOps to deploy the app. 
## Assumptions:
##     Existing ACR
##     Existing AKS cluster
##     ACR is attached to AKS cluster (no image pull secret required)
## -------------------------------------------------------------------------------------------------------------------------

# This workflow demonstrates building and pushing a container image to an Azure Container Registry.
# The workflow then updates the necessary Kubernetes manifest deployment files in the GitHub repo so that a GitOps operator can sync them to deploy an application to an Azure Kubernetes Service cluster.
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario.
name: App Deploy Flask - GitOps

on: 
  push:
    branches:
      - 'main'
    paths:
      - workloads/flask/*
    
  workflow_dispatch:
    inputs:
      ACRNAME:
        description: 'The Name of the ACR resource'
        default: 'MiaAcr'
        required: true
        type: string
      APPNAME:
        description: 'The Name of the Application to deploy'
        default: "flask"
        required: true
        type: string
      ENVIRONMENT:
        description: 'A GitHub Environment to pull action secrets from'
        default: 'production'
        required: true
        type: environment

permissions:
      id-token: write
      contents: write

jobs:
  BuildPush:
    name: Build and Push Image
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment || 'production' }}
    steps:
    
      # Get application code from repo
      - name: Get application code from repo
        uses: actions/checkout@main
      
      # Logs into your Azure subscription
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Run Azure CLI commands'
        run: |
          az account show
          az group list
          pwd 
      
      - name: Connect to Azure Container Registry (ACR)
        id: acrconnect
        run: |
          echo "Retrieving access token from ${{ inputs.ACRNAME || 'MiaAcr'}}"
          TOKEN=$(az acr login -n ${{ inputs.ACRNAME || 'MiaAcr' }} --expose-token)

          if [ -z "$TOKEN" ]
          then
            echo "ACR Token was not retrieved successfully"
            exit 1
          fi

          ACRTOKEN=$(echo $TOKEN | jq -r ".accessToken")
          LOGINSERVER=$(echo $TOKEN | jq -r ".loginServer")

          echo "ACR Login Server: $LOGINSERVER"
          echo "::set-output name=loginServer::$LOGINSERVER"

          echo "Passing token as stdin to docker login"
          echo $ACRTOKEN | docker login $LOGINSERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

      # Builds and Pushes the container image to the Azure Container Registry (ACR)
      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          ACRSERVER: "${{ steps.acrconnect.outputs.loginServer }}"
          APPNAME: "${{ inputs.APPNAME || 'flask' }}"
        run: |
          cd "workloads/$APPNAME"
          docker build . -t $ACRSERVER/$APPNAME:${{ github.sha }}
          docker push $ACRSERVER/$APPNAME:${{ github.sha }}

  Update-K8s-Manifests:
    name: Update YAML Manifests
    needs: BuildPush
    environment: ${{ inputs.Environment }}
    runs-on: ubuntu-latest
    steps:

    # Checks out the baseline repository
    - uses: actions/checkout@v2

    #- name: Update image name in manifest file
    #  uses: azure/powershell@v1
    #  with:
    #    inlineScript: |
    #      $line = Get-Content workloads/flask/deployment.yaml | Select-String image: | Select-Object -ExpandProperty Line
    #      $content = Get-Content workloads/flask/deployment.yaml
    #      $content | ForEach-Object {$_ -replace $line,"        image: ${{ inputs.ACRNAME || 'MiaAcr' }}.azurecr.io/${{ inputs.APPNAME }}:${{ github.sha }}"} | Set-Content workloads/flask/deployment.yaml
    #    azPSVersion: "latest"

    - name: Set Container Image
      uses: mikefarah/yq@master
      with:
        cmd: yq -i '(.spec.template.spec.containers[0].image)|="${{ inputs.ACRNAME || 'MiaAcr' }}.azurecr.io/${{ inputs.APPNAME }}:${{ github.sha }}"' workloads/flask/deployment.yaml
    
    - name: Commit changes in manifest to repo
      run: | 
        git config user.name "GitHub Actions Bot"
        git config user.email ""
        git add workloads/flask/deployment.yaml
        git commit -m "Update image version in K8s Deployment manifests file"
        git push origin
